; Important : each instruction executes in 2 cycles = Tclk*2
CONSTANT delay_1us_constant,0b		; 2+4*A+2=48 => A=0x0b for clk=48MHz

CONSTANT uart_status_port,81
CONSTANT uart_port,80
CONSTANT spi_clk_div_port,F4
CONSTANT spi_receive_port,F3
CONSTANT spi_transmit_port,F2
CONSTANT spi_status_port,F1
CONSTANT spi_cs_ctl_port,F0

CONSTANT UARTavailable,01

; these reg0-4 are clobbered by delay_* functions
NAMEREG s0,reg0
NAMEREG s1,reg1
NAMEREG s2,reg2
NAMEREG s3,reg3
NAMEREG s4,reg4

NAMEREG sE,dummy
NAMEREG sF,data

ADDRESS 000
coldstart:

;	jump spi_inout				; for simulation
	call delay_1ms
;	call delay_40us
	jump loop					; for simulation

	call delay_1ms				; give time to external logic to settle..

	call crlf
	load s0,CHAR_EXCLA
	call putc
	load s0,CHAR_r
	call putc
	load s0,CHAR_e
	call putc
	load s0,CHAR_s
	call putc
	load s0,CHAR_e
	call putc
	load s0,CHAR_t
	call putc
	load s0,CHAR_EXCLA
	call putc
	call crlf

main:
	load s0,CHAR_m
	call putc
	load s0,CHAR_o
	call putc
	load s0,CHAR_n
	call putc
	load s0,CHAR_GREATER
	call putc
	call getc
	compare data,CHAR_s
	jump Z,spi_out
	compare data,CHAR_l
	jump Z,loop
	compare data,CHAR_QUEST
	jump Z,help
ret_main:
	call crlf
	jump main

loop:
	load s5,02
;	load data,11
	load data,41
loop1:
	load s0,CHAR_EQUAL
	call putc
	call spi_inout
	call put2hex
	rl data
;	call delay_1s
;	call delay_20ms
	call delay_1ms
;	call delay_40us

	sub s5,01
loop2:
	jump Z,loop2

	jump loop1

; input : data=byte to send to spi
; return in s0
; clobbers dummy
spi_inout:
	load dummy,ff	; ff is ok => 93kHz
;	load dummy,01	; 01 is ok => 12MHz
;	load dummy,00	; 00 is KO => 24MHz too fast, shifts slave output 1 bit right
	output dummy,spi_clk_div_port
	load dummy,fe
	output dummy,spi_cs_ctl_port
	output data,spi_transmit_port
spi_inout1:
	input dummy,spi_status_port
	test dummy,01
	jump NZ,spi_inout1
	input s0,spi_receive_port
	load dummy,ff
	output dummy,spi_cs_ctl_port
	return

spi_out:
	load s0,CHAR_EQUAL
	call putc
	call get2hex
	load s0,CHAR_EQUAL
	call putc
	call spi_inout
	call put2hex
	jump ret_main

help:
	call crlf
	load s0,CHAR_QUEST
	call putc
	call space
	load s0,CHAR_h
	call putc
	load s0,CHAR_e
	call putc
	load s0,CHAR_l
	call putc
	load s0,CHAR_p
	call putc

	call crlf
	load s0,CHAR_l
	call putc
	call space
	load s0,CHAR_l
	call putc
	load s0,CHAR_o
	call putc
	load s0,CHAR_o
	call putc
	load s0,CHAR_p
	call putc

	call crlf
	load s0,CHAR_s
	call putc
	call space
	load s0,CHAR_s
	call putc
	load s0,CHAR_p
	call putc
	load s0,CHAR_i
	call putc
	load s0,CHAR_UNDER
	call putc
	load s0,CHAR_o
	call putc
	load s0,CHAR_u
	call putc
	load s0,CHAR_t
	call putc
	jump ret_main
	
; input : s0=byte to print as hex
; clobbers s0, s1
put2hex:
	load s1,s0
	sr0 s0
	sr0 s0
	sr0 s0
	sr0 s0
	call put1hex
	load s0,s1
put1hex:
	and s0,0f
	compare s0,0a
	jump C,put1hex1
	add s0,7
put1hex1:
	add s0,30
	jump putc

; return in data
; clobbers s0
get1hex:
	call getc_ne
	load s0,data
	sub data,30		; '0'
	compare data,0a	; '9'-'0'+1
	jump C,get1hex2
	sub data,11		; 'A'-'0'
	compare data,06	; 'F'-'A'+1
	jump C,get1hex1
	sub data,20		; 'a'-'A'
	compare data,06	; 'f'-'a'+1
	jump NC,get1hex
get1hex1:
	add data,0a
get1hex2:
	jump putc

; return in data
; clobbers s0, s1
get2hex:
	call get1hex
	load s1,data
	sl0 s1
	sl0 s1
	sl0 s1
	sl0 s1
	call get1hex
	or data,s1
	return

; clobbers s0, dummy
crlf:
	load s0,CHAR_CR
	call putc
	load s0,CHAR_LF
	jump putc

; clobbers s0, dummy
space:
	load s0,CHAR_SPACE
	jump putc

; return in data
getc_ne:
	load data,00
	ENABLE INTERRUPT
getc_ne1:
	test data,ff
	jump Z,getc_ne1
	return

; return in data
; clobbers s0, dummy
getc:
	call getc_ne
	load s0,data
; pass-through to putc here to spare 2 words
; ..............

; input in s0
; clobbers dummy
putc:
	input dummy,uart_status_port
	test dummy,01
	jump NZ,putc
	output s0,uart_port
	return

delay_1us: LOAD reg0,delay_1us_constant	; routine takes 2+4*A+2 cycles
_wait_1us: SUB reg0,01			; (2+4*A+2)*Tclk=10e-6s => A=(Fclk/10e6-4)/4
	JUMP NZ,_wait_1us			; => A=0x0b for Fclk=48MHz, A=7 for 32MHz
	RETURN
delay_40us: LOAD reg1,23		; routine takes 2+(2+(4+4*A)+4)*B+2 cycles
_wait_40us: CALL delay_1us		; (2+(2+(4+4*A)+4)*B+2)*Tclk=40e-6s
	SUB reg1,01					; => B=(Fclk/25000-4)/(10+4*A)
	JUMP NZ,_wait_40us			; => B=33.578~=34=0x22 for 32, B~=35=0x23 for 48
	RETURN
delay_1ms: LOAD reg2,19			;25 x 40us = 1ms
_wait_1ms: CALL delay_40us		; 1000000=A*40000+(2+3A)*62.5 in ns for 32
	SUB reg2,01					; A=(1000000-2*62.5)/(40000+3*62.5)
	JUMP NZ,_wait_1ms			; A=24.880~=25=0x19 for 32
	RETURN						; 1000000=A*40000+(2+3A)*41.6 in ns for 48
								; A=(1000000-2*41.6)/(40000+3*41.6)
								; A=24.920~=25=0x19 for 48
delay_20ms: LOAD reg3,14			;20 x 1ms = 20ms  (20=0x14)
_wait_20ms: CALL delay_1ms
	SUB reg3,01
	JUMP NZ,_wait_20ms
	RETURN
delay_1s: LOAD reg4,32				;50 x 20ms = 1000ms (50=0x32)
_wait_1s: CALL delay_20ms
	SUB reg4,01
	JUMP NZ,_wait_1s
	RETURN

isr:
	input data,uart_port
	returni DISABLE

ADDRESS 3ff
	jump isr

CONSTANT CHAR_A,41
CONSTANT CHAR_B,42
CONSTANT CHAR_e,65
CONSTANT CHAR_h,68
CONSTANT CHAR_i,69
CONSTANT CHAR_l,6c
CONSTANT CHAR_m,6d
CONSTANT CHAR_n,6e
CONSTANT CHAR_o,6f
CONSTANT CHAR_p,70
CONSTANT CHAR_r,72
CONSTANT CHAR_s,73
CONSTANT CHAR_t,74
CONSTANT CHAR_u,75
CONSTANT CHAR_UNDER,5f
CONSTANT CHAR_SPACE,20
CONSTANT CHAR_EQUAL,3d
CONSTANT CHAR_GREATER,3E
CONSTANT CHAR_EXCLA,21
CONSTANT CHAR_QUEST,3f
CONSTANT CHAR_LF,0a
CONSTANT CHAR_CR,0d
